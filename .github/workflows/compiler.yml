---
name: Compiler
on:
  push: null
jobs:

  setup-env:
    name: Setup environment
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4

      - name: Setup environment variables
        run: |
          # Retrieve environment variables from code
          get_env() {
              local key=$1
              local path="source/constants.py"
              value=$(python3 -c "with open('$path', 'r') as f: print([l for l in f.readlines() if '$key'.lower() in l][0].split(' = ')[1][1:-2].strip())")
              echo $key=$value >> $GITHUB_ENV
          }

          get_env APP_VERSION
          get_env AMS_VERSION
          get_env TELEPATH_VERSION

          echo EXPORTED_ENV=true >> $GITHUB_ENV

  test-env:
    name: Test environment
    runs-on: ubuntu-latest
    needs: setup-env
    steps:
      - name: Test environment variables
        run: |
          echo auto-mcs-${{ env.APP_VERSION }}
          echo ${{ env.EXPORTED_ENV }} | grep "true"




  windows:
    name: Windows Build
    runs-on: windows-2019
    needs: test-env
    steps:
    
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Compile auto-mcs
        shell: pwsh
        run: |
          systeminfo
          $python_path = "$env:LOCALAPPDATA\Programs\Python\Python39"
          md $python_path
          Move-Item -Force C:\hostedtoolcache\windows\Python\3.9.13\x64\* $python_path
          powershell -noprofile -executionpolicy bypass -file .\build-tools\build-windows.ps1

      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: auto-mcs-windows-${{ env.APP_VERSION }}
          path: build-tools/dist/
          retention-days: 5



  macos:
    name: macOS Build
    runs-on: macos-12
    needs: test-env
    steps:
    
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Dependencies
        run: |
          brew install python@3.9 python-tk@3.9 create-dmg
      
      - name: Compile auto-mcs
        run: |
          root=$(pwd)
          cd build-tools
          mkdir -p /Users/runner/Library/Fonts
          chmod +x build-macos.sh
          sudo ./build-macos.sh
          chmod +x dist/auto-mcs.app/Contents/MacOS/auto-mcs

          # Create .dmg from .app
          while : ; do
            [[ -f "$root/build-tools/dist/auto-mcs.dmg" ]] && break
            sleep 1
            sudo create-dmg \
              --volname "auto-mcs" \
              --volicon "$root/other/macos-dmg/icon.icns" \
              --background "$root/other/macos-dmg/bg.png" \
              --window-pos 200 120 \
              --window-size 835 620 \
              --icon-size 128 \
              --text-size 16 \
              --icon "auto-mcs.app" 230 277 \
              --hide-extension "auto-mcs.app" \
              --app-drop-link 593 277 \
              "$root/build-tools/dist/auto-mcs.dmg" \
              "$root/build-tools/dist/auto-mcs.app"
          done

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: auto-mcs-macos-${{ env.APP_VERSION }}
          path: build-tools/dist/auto-mcs.dmg
          retention-days: 5



  linux:
    name: Linux Build
    runs-on: ubuntu-20.04
    needs: test-env
    steps:
    
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt install xvfb fluxbox libasound2 libasound-dev tk8.6 libtk8.6 tcl8.6 libtcl8.6 -y
          export DISPLAY=:0.0
          Xvfb :0 -screen 0 1280x720x24 > /dev/null 2>&1 &
          sleep 1
          fluxbox > /dev/null 2>&1 &
          
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
    
      - name: Compile auto-mcs
        run: |
          spec_file="auto-mcs.linux.spec"
          sudo cp -f /usr/lib/x86_64-linux-gnu/libcrypt.so.1 /usr/lib64/libcrypt.so.2
          export DISPLAY=:0.0
          cd build-tools
          current=$( pwd )
          python3.9 -m pip install --upgrade pip setuptools wheel
          python3.9 -m venv ./venv
          source ./venv/bin/activate
          pip install -r reqs-linux.txt
          python -m kivy.tools.packaging.pyinstaller_hooks hook ./venv/lib/python3.9/site-packages/kivy/tools/packaging/pyinstaller_hooks/kivy-hook.py
          cp -f ../source/gui-assets/fonts/Consolas* /usr/share/fonts
          fc-cache -f
          # python locale-gen.py
          echo Compiling auto-mcs
          export KIVY_AUDIO=ffpyplayer
          cd $current
          cp $spec_file ../source
          cd ../source
          pyinstaller $spec_file --upx-dir $current/upx/linux --clean
          cd $current
          rm -rf ../source/$spec_file
          mv -f ../source/dist .
          deactivate
          if ! [ -f $current/dist/auto-mcs ]; then
            "[FAIL] Something went wrong during compilation"
            exit 1
          else
          	echo [SUCCESS] Compiled binary:  \"$current/dist/auto-mcs\"
          fi
          chmod +x dist/auto-mcs

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: auto-mcs-linux-${{ env.APP_VERSION }}
          path: build-tools/dist/
          retention-days: 5



  linux-arm:
    name: Linux Build (arm64)
    runs-on: ubuntu-20.04
    needs: test-env
    steps:
    
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Create artifact directory
        run: |
          mkdir build-tools/dist
          
      - name: Configure VM & compile auto-mcs
        uses: pguyot/arm-runner-action@v2.6.0
        with:
          cpu: cortex-a53
          cpu_info: cpuinfo/raspberrypi_zero2_w_arm64
          base_image: raspios_lite_arm64:2022-04-04
          image_additional_mb: 4096
          copy_artifact_path: build-tools/dist/*
          copy_artifact_dest: build-tools/dist
          commands: |
              # Install dependencies
              mkdir -p /usr/lib64/
              sudo cp -f /usr/lib/aarch64-linux-gnu/libcrypt.so.1 /usr/lib64/libcrypt.so.2
              sudo apt update -y
              sudo apt install xvfb fluxbox libasound2 libasound-dev tk8.6 libtk8.6 tcl8.6 libtcl8.6 upx python3-venv python3-tk python3-dev fontconfig -y
              export DISPLAY=:0.0
              Xvfb :0 -screen 0 1280x720x24 > /dev/null 2>&1 &
              sleep 1
              fluxbox > /dev/null 2>&1 &

              # Build auto-mcs
              spec_file="auto-mcs.linux.spec"
              export DISPLAY=:0.0
              cd build-tools
              current=$( pwd )
              python3 -m venv ./venv
              . ./venv/bin/activate
              pip install -r reqs-linux.txt
              python -m kivy.tools.packaging.pyinstaller_hooks hook ./venv/lib/python3.9/site-packages/kivy/tools/packaging/pyinstaller_hooks/kivy-hook.py
              cp -f ../source/gui-assets/fonts/Consolas* /usr/share/fonts
              fc-cache -f
              # python locale-gen.py
              echo Compiling auto-mcs
              export KIVY_AUDIO=ffpyplayer
              cd $current
              cp $spec_file ../source
              cd ../source
              pyinstaller $spec_file --upx-dir /usr/bin --clean
              cd $current
              rm -rf ../source/$spec_file
              mv -f ../source/dist .
              if ! [ -f $current/dist/auto-mcs ]; then
                "[FAIL] Something went wrong during compilation"
                exit 1
              else
              	echo [SUCCESS] Compiled binary:  \"$current/dist/auto-mcs\"
              fi
              chmod +x dist/auto-mcs
              
      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: auto-mcs-linux-arm64-${{ env.APP_VERSION }}
          path: build-tools/dist/
          retention-days: 5



  alpine:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test-env
    steps:

        - name: Clone Repo
          uses: actions/checkout@v4
          with:
            fetch-depth: 1

        - name: Setup Alpine Linux
          uses: jirutka/setup-alpine@v1
          with:
            branch: v3.15

        - name: Install Dependencies
          run: |
            apk add xvfb fluxbox python3 py3-pip gcc pangomm-dev pkgconfig python3-dev zlib-dev libffi-dev musl-dev linux-headers mtdev-dev mtdev
            export DISPLAY=:0.0
            Xvfb :0 -screen 0 1280x720x24 > /dev/null 2>&1 &
            sleep 1
            fluxbox > /dev/null 2>&1 &

          shell: alpine.sh --root {0}

        - name: Compile auto-mcs
          run: |
            spec_file="auto-mcs.docker.spec"
            export DISPLAY=:0.0
            cd build-tools
            current=$( pwd )
            python3.9 -m pip install --upgrade pip setuptools wheel
            python3.9 -m venv ./venv
            source ./venv/bin/activate
            pip install -r reqs-docker.txt
            echo Compiling auto-mcs
            cd $current
            cp $spec_file ../source
            cd ../source
            pyinstaller $spec_file --upx-dir $current/upx/linux --clean
            cd $current
            rm -rf ../source/$spec_file
            mv -f ../source/dist .
            deactivate
            if ! [ -f $current/dist/auto-mcs ]; then
              "[FAIL] Something went wrong during compilation"
              exit 1
            else
              echo [SUCCESS] Compiled binary:  \"$current/dist/auto-mcs\"
            fi
            chmod +x dist/auto-mcs
          shell: alpine.sh {0}

        - name: Upload Binary
          uses: actions/upload-artifact@v4
          with:
            name: auto-mcs-alpine-${{ env.APP_VERSION }}
            path: build-tools/dist/
            retention-days: 5



  alpine-arm:
    name: Docker Build (arm64)
    runs-on: ubuntu-latest
    needs: test-env
    steps:

      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          arch: aarch64
          branch: v3.15

      - name: Install Dependencies
        run: |
          apk add xvfb fluxbox python3 py3-pip gcc pangomm-dev pkgconfig python3-dev zlib-dev libffi-dev musl-dev linux-headers mtdev-dev mtdev
          export DISPLAY=:0.0
          Xvfb :0 -screen 0 1280x720x24 > /dev/null 2>&1 &
          sleep 1
          fluxbox > /dev/null 2>&1 &

        shell: alpine.sh --root {0}

      - name: Compile auto-mcs
        run: |
          spec_file="auto-mcs.docker.spec"
          export DISPLAY=:0.0
          cd build-tools
          current=$( pwd )
          python3.9 -m pip install --upgrade pip setuptools wheel
          python3.9 -m venv ./venv
          source ./venv/bin/activate
          pip install -r reqs-docker.txt
          echo Compiling auto-mcs
          cd $current
          cp $spec_file ../source
          cd ../source
          pyinstaller $spec_file --upx-dir $current/upx/linux --clean
          cd $current
          rm -rf ../source/$spec_file
          mv -f ../source/dist .
          deactivate
          if ! [ -f $current/dist/auto-mcs ]; then
            "[FAIL] Something went wrong during compilation"
            exit 1
          else
            echo [SUCCESS] Compiled binary:  \"$current/dist/auto-mcs\"
          fi
          chmod +x dist/auto-mcs
        shell: alpine.sh {0}

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: auto-mcs-alpine-arm64-${{ env.APP_VERSION }}
          path: build-tools/dist/
          retention-days: 5



  docker:
    name: Push Docker image
    runs-on: ubuntu-latest
#    needs: [alpine, alpine-arm]
    needs: alpine
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    env:
      REGISTRY: docker.io
      IMAGE_NAME: macarooniman/auto-mcs

    steps:

      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download auto-mcs binary
        uses: actions/download-artifact@v4
        with:
          name: auto-mcs-alpine-${{ env.APP_VERSION }}

      - name: Move artifact
        run: |
          mv /home/runner/work/auto-mcs/auto-mcs/auto-mcs /home/runner/work/auto-mcs/auto-mcs/docker

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          labels: |
              org.opencontainers.image.title={{ env.IMAGE_NAME }}
              org.opencontainers.image.description=auto-mcs (docker)
              org.opencontainers.image.version={{ env.APP_VERSION }}
              org.opencontainers.image.revision={{ github.sha }}
              org.opencontainers.image.created={{ now }}
              org.opencontainers.image.authors=Kaleb Efflandt <kaleb.efflandt@auto-mcs.com>
              org.opencontainers.image.url=https://auto-mcs.com
              org.opencontainers.image.source=https://github.com/{{ github.repository }}
              org.opencontainers.image.licenses=GPL-3.0

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v3
        with:
          context: /home/runner/work/auto-mcs/auto-mcs/docker
          file: /home/runner/work/auto-mcs/auto-mcs/docker/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.APP_VERSION }}
            ${{ env.IMAGE_NAME }}:latest]
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true