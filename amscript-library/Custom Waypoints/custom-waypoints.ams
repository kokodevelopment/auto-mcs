#!
# title: Custom Waypoints
# author: Kaleb Efflandt
# version: 2.1
# description: A utility to create and teleport to waypoints
#
#
# Usage:
#
# ------- View all Commands -------
# >>  !waypoint help
#
# ----- Set a waypoint "Home" -----
# >>  !waypoint set Home
#
# ----- Teleport to "Home" --------
# >>  !warp Home
#!




# Generates a fixed-width centered header for logging
def generate_header(text):
    header_len = 50
    adjusted = round((header_len - len(text) - 2) / 2)
    final_str = "-"*adjusted + f" {text} " + "-"*adjusted
    if len(final_str) < header_len:
        final_str = final_str + ("-"*(header_len-len(final_str)))
    return final_str[:50]




# '!waypoint' command to manage waypoints
@player.on_alias(player, command='waypoint', arguments={'command': False}, description='Manage waypoints (Custom Waypoints)'):
    cmd = arguments['command']
    
    if 'waypoint' not in player.persistent:
        player.persistent['waypoint'] = {}
    
    # Shows all waypoint sub-commands
    if cmd == "help" or not cmd:
        player.log(generate_header('All Waypoint Commands'), 'green', 'normal')
        player.log('!waypoint help', 'white', 'normal')
        player.log('>  Shows all subcommands (This command)', 'gray', 'normal')
        player.log('!waypoint list', 'white', 'normal')
        player.log('>  Shows all available waypoints', 'gray', 'normal')
        player.log('!waypoint set <name>', 'white', 'normal')
        player.log('>  Creates waypoint <name> at current position', 'gray', 'normal')
        player.log('!waypoint remove <name>', 'white', 'normal')
        player.log('>  Deletes waypoint <name>', 'gray', 'normal')
        player.log('!warp <name>', 'white', 'normal')
        player.log('>  Teleports to waypoint <name>', 'gray', 'normal')


    # Shows all player defined waypoints
    elif cmd == "list":
        waypoints = player.persistent['waypoint']
        player.log(generate_header('Available Waypoints'), 'green', 'normal')
        if len(waypoints) > 0:
            player.log(', '.join(list(waypoints.keys())), 'gray', 'normal')
        else:
            player.log("No waypoints were detected. Type '!waypoint set <name>' to create one", 'gray', 'normal')


    # Manages a waypoint by name
    elif cmd.startswith("set") or cmd.startswith("remove"):
        if " " in cmd:
            # Specifies 3rd argument
            name = cmd.split(" ", 1)[1].strip().lower()
            
            # Save player's current coordinates to their persistent configuration
            if cmd.startswith("set"):
                player.persistent['waypoint'][name] = player.position
                player.log_success(f"Waypoint '{name}' set successfully!")
            
            # Deletes waypoint by name
            elif name in player.persistent['waypoint']:
                del player.persistent['waypoint'][name]
                player.log_success(f"Waypoint '{name}' removed successfully!")
                
            else:
                player.log_error(f"Waypoint '{name}' does not exist. Type '!waypoint set {name}' to create it")
            
        else:
            player.log_error(f"Invalid syntax: <name> is unspecified for '{cmd}'. Type '{command} help' for more info")

    # Catch all
    else:
        player.log_error(f"Invalid command '{cmd}'. Type '{command} help' for more info")
        
        
        
    
# '!warp' command to teleport to waypoint
@player.on_alias(player, command="warp", arguments={'name': True}, description='Teleport to a waypoint (Custom Waypoints)'):
    if 'waypoint' not in player.persistent:
        player.persistent['waypoint'] = {}
    
    # Check if waypoint exists in player's persistent configuration and teleport them
    if arguments['name'] in player.persistent['waypoint']:
        server.execute(f"tp {player} {player.persistent['waypoint'][arguments['name']]}")
        player.log_success(f"Warped to waypoint '{arguments['name']}'")
    else:
        player.log_error(f"Waypoint '{arguments['name']}' does not exist")